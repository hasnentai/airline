{"version":3,"sources":["views/Loaders/loaders.js","assets/img/morden_illustration.svg","assets/img/crouded_illustration.svg","assets/img/flow_of_purchase.svg","assets/img/Conveniences.svg","views/User/User.js","context/PaymentContext.js","views/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Loaders","state","id","className","Component","module","exports","User","src","loginBg","width","style","position","PaymentContext","React","createContext","Provider","Consumer","Main","lazy","Confirmation","PaymentSuccess","PrivacyPolicy","Terms","ContactUs","App","useContext","fallback","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAGMA,G,kNACFC,MAAQ,G,uDAEJ,OAAQ,yBAAMC,GAAG,iBAAiBC,UAAU,mBAAkB,yBAAKA,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,oC,GAH/GC,cAOPJ,O,mBCVfK,EAAOC,QAAU,IAA0B,iD,sHCA3CD,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,gNCqB5BC,G,0OAbXN,MAAQ,G,uDAEJ,OAAQ,oCACJ,yBAAKE,UAAU,oCACX,yBAAKK,IAAKC,IAASC,MAAM,SACzB,yBAAKP,UAAU,aAAcQ,MAAO,CAAEC,SAAU,aAC5C,yBAAKT,UAAU,aAAf,oC,GAPDC,cCLbS,EAAiBC,IAAMC,gBAKdF,GAHgBA,EAAeG,SACfH,EAAeI,SAE/BJ,G,WCLMT,Y,mBCqBfc,EAAOJ,IAAMK,MAAK,kBAAM,4EACxBC,EAAeN,IAAMK,MAAK,kBAAM,qEAChCE,EAAiBP,IAAMK,MAAK,kBAAM,wDAClCG,EAAgBR,IAAMK,MAAK,kBAAM,sEACjCI,EAAQT,IAAMK,MAAK,kBAAM,sEACzBK,EAAYV,IAAMK,MAAK,kBAAM,sEAoCpBM,MAnCf,WAEE,OADcC,qBAAWb,GAEvB,kBAAC,WAAD,CAAUc,SAAU,kBAAC,IAAD,OAElB,kBAAC,IAAD,KACE,kBAAC,SAAD,KACE,kBAAC,QAAD,CAAOC,OAAK,EAACC,KAAK,YAChB,kBAACX,EAAD,OAEF,kBAAC,QAAD,CAAOW,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,QAAD,CAAOA,KAAK,iBACV,kBAACT,EAAD,OAEF,kBAAC,QAAD,CAAOS,KAAK,mBACV,kBAACR,EAAD,OAEF,kBAAC,QAAD,CAAOQ,KAAK,kBACV,kBAACP,EAAD,OAEF,kBAAC,QAAD,CAAOO,KAAK,UACV,kBAACN,EAAD,OAEF,kBAAC,QAAD,CAAOM,KAAK,cACV,kBAACL,EAAD,WC3CQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,YACvB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c7c94cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './loaders.scss'\n\nclass Loaders extends Component {\n    state = {}\n    render() {\n        return (<div  id=\"loader-wrapper\" className=\"loading-wrapper\"><div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>);\n    }\n}\n\nexport default Loaders;","module.exports = __webpack_public_path__ + \"static/media/morden_illustration.3e6292fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/crouded_illustration.4872c53c.svg\";","module.exports = __webpack_public_path__ + \"static/media/flow_of_purchase.11b829b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/Conveniences.dc70294c.svg\";","import React, { Component } from 'react';\nimport loginBg from \"../../assets/img/morden_illustration.svg\";\nimport Travel from \"../../assets/img/crouded_illustration.svg\";\nimport FOP from \"../../assets/img/flow_of_purchase.svg\";\nimport Conveniences from \"../../assets/img/Conveniences.svg\";\nimport \"../AdContent/Ads.scss\";\nimport \"./User.scss\";\nclass User extends Component {\n    state = {}\n    render() {\n        return (<>\n            <div className=\"container-fluid ad-container p-0\">\n                <img src={loginBg} width=\"100%\" />\n                <div className=\"btn ad-btn\"  style={{ position: \"absolute\" }}>\n                    <div className=\"alert-btn\">You are logged in as User</div>\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default User;","import React from 'react'\n\nconst PaymentContext = React.createContext()\n\nexport const PaymentProvider = PaymentContext.Provider\nexport const PaymentConsumer = PaymentContext.Consumer\n\nexport default PaymentContext","import React, { Component } from 'react';\nimport { Spinner } from 'reactstrap';\nclass Loader extends Component {\n    state = {}\n    render() {\n        return (<div>\n            {/* <Header /> */}\n            <div className=\"spinner-container\">\n                <Spinner style={{ width: '3rem', height: '3rem' }} color=\"primary\" />\n            </div>\n        </div>);\n    }\n}\n\nexport default Loader;","import React, { useContext, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n// import Main from \"./Main\";\nimport './App.scss';\n// import '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport User from './views/User/User';\n// import Confirmation from \"./views/Payment/Confirmation\";\n// import PaymentSuccess from \"./views/Payment/PaymentSuccess\";\nimport PaymentContext from \"./context/PaymentContext\";\nimport Loader from \"./views/Loader/Loader\";\n// import './styles/animate.css';\nimport \"animate.css/animate.min.css\";\nimport faStyles from 'font-awesome/css/font-awesome.css'\nimport Loaders from './views/Loaders/loaders';\n// import PrivacyPolicy from './views/PrivacyPolicy/PrivacyPolicy';\n// import Terms from './views/TermsAndConditions/Terms';\nconst Main = React.lazy(() => import(\"./Main\"));\nconst Confirmation = React.lazy(() => import(\"./views/Payment/Confirmation\"));\nconst PaymentSuccess = React.lazy(() => import(\"./views/Payment/PaymentSuccess\"));\nconst PrivacyPolicy = React.lazy(() => import(\"./views/PrivacyPolicy/PrivacyPolicy\"));\nconst Terms = React.lazy(() => import(\"./views/TermsAndConditions/Terms\"))\nconst ContactUs = React.lazy(() => import(\"./views/ContactUs/ContactUs\"))\nfunction App() {\n  const state = useContext(PaymentContext)\n  return (\n    <Suspense fallback={<Loaders></Loaders>}>\n      {/* <PaymentContext.Provider> */}\n      <Router>\n        <Switch>\n          <Route exact path=\"/airline\">\n            <Main />\n          </Route>\n          <Route path=\"/user\">\n            <User />\n          </Route>\n          <Route path=\"/confirmation\">\n            <Confirmation />\n          </Route>\n          <Route path=\"/paymentsuccess\">\n            <PaymentSuccess />\n          </Route>\n          <Route path=\"/privacypolicy\">\n            <PrivacyPolicy />\n          </Route>\n          <Route path=\"/terms\">\n            <Terms />\n          </Route>\n          <Route path=\"/contactus\">\n            <ContactUs />\n          </Route>\n        </Switch>\n      </Router>\n      {/* </PaymentContext.Provider> */}\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}